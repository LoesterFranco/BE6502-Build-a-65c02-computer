
SB-Cross Assembler version 3.03.06
Please visit www.sbprojects.net for a complete description.

Assembling....

Pass one
Loaded 65c02 overlay version 3.01.02

Pass two
0000-                  1       * ---------------------------------------------------------
0000-                  2       * INITIALIZE LCD DISPLAY AND OUTPUT SOME DATA TO IT
0000-                  3
0000-                  4
0000-                  5               .CR     65C02
0000-                  6               .TF     hello_lcd.hex,INT
8000-                  7               .OR     $8000
8000-                  8               .TA     $0000
8000-                  9
6000-                 10       ORB     .EQ     $6000           VIA Port B data
6001-                 11       ORA     .EQ     $6001           VIA Port A data
6002-                 12       DDRB    .EQ     $6002           VIA DDRB
6003-                 13       DDRA    .EQ     $6003           VIA DDRA
8000-                 14
8000-42 45 36 35 
     30 32 00         15       MSG1    .AS     /BE6502/,#$00
8007-48 45 4C 4C 
     4F 20 4C 43 
     44 00            16       MSG2    .AS     /HELLO LCD/,#$00
8011-                 17
8011-A9 FF            18 (  2) INITVIA LDA     #%11111111
8013-8D 02 60         19 (  4)         STA     DDRB
8016-A9 E0            20 (  2)         LDA     #%11100000
8018-8D 03 60         21 (  4)         STA     DDRA
801B-60               22 (  6)         RTS
801C-                 23
801C-A9 30            24 (  2) INITLCD LDA     #%00110000      FUNCTION SET (INITIALIZE)
801E-20 52 80         25 (  6)         JSR     LCD_CMD
8021-20 78 80         26 (  6)         JSR     WAITLCD
8024-                 27
8024-A9 30            28 (  2)         LDA     #%00110000
8026-20 52 80         29 (  6)         JSR     LCD_CMD
8029-20 78 80         30 (  6)         JSR     WAITLCD
802C-                 31
802C-A9 30            32 (  2)         LDA     #%00110000
802E-20 52 80         33 (  6)         JSR     LCD_CMD
8031-20 78 80         34 (  6)         JSR     WAITLCD
8034-                 35
8034-A9 38            36 (  2)         LDA     #%00111000      FUNCTION SET (8-BIT TRANSFER)
8036-20 52 80         37 (  6)         JSR     LCD_CMD
8039-20 78 80         38 (  6)         JSR     WAITLCD
803C-                 39
803C-A9 0D            40 (  2)         LDA     #%00001101      DISPLAY ON, CURSOR EN.
803E-20 52 80         41 (  6)         JSR     LCD_CMD
8041-20 78 80         42 (  6)         JSR     WAITLCD
8044-                 43
8044-A9 01            44 (  2)         LDA     #%00000001      CLEAR DISPLAY
8046-20 52 80         45 (  6)         JSR     LCD_CMD
8049-20 78 80         46 (  6)         JSR     WAITLCD
804C-                 47
804C-A9 06            48 (  2)         LDA     #%00000110      SET ENTRY MODE
804E-20 52 80         49 (  6)         JSR     LCD_CMD
8051-60               50 (  6)         RTS
8052-                 51
8052-8D 00 60         52 (  4) LCD_CMD STA     ORB             DATA IS IN ACCUMULATOR
8055-A9 80            53 (  2)         LDA     #%10000000      E=H R/W=L RS=L
8057-8D 01 60         54 (  4)         STA     ORA
805A-A9 00            55 (  2)         LDA     #%00000000      E=L PULSE CLOCK LOW
805C-8D 01 60         56 (  4)         STA     ORA
805F-A9 80            57 (  2)         LDA     #%10000000      E=H
8061-8D 01 60         58 (  4)         STA     ORA
8064-60               59 (  6)         RTS
8065-                 60
8065-8D 00 60         61 (  4) LCD_CHR STA     ORB             DATA IS IN ACCUMULATOR
8068-A9 A0            62 (  2)         LDA     #%10100000      E=H R/W=L RS=H
806A-8D 01 60         63 (  4)         STA     ORA
806D-A9 20            64 (  2)         LDA     #%00100000      E=L PULSE CLOCK LOW
806F-8D 01 60         65 (  4)         STA     ORA
8072-A9 A4            66 (  2)         LDA     #%10100100      E=H
8074-8D 01 60         67 (  4)         STA     ORA
8077-60               68 (  6)         RTS
8078-                 69
8078-EA               70 (  2) WAITLCD NOP                     PLACEHOLDER
8079-60               71 (  6)         RTS
807A-                 72
807A-20 11 80         73 (  6) START   JSR     INITVIA         INITIALIZE VIA
807D-20 1C 80         74 (  6)         JSR     INITLCD         INITIALIZE LCD
8080-                 75
8080-A2 00            76 (  2) HELLO   LDX     #$00            CLEAR X
8082-BD 00 80         77 ( 4*) NEXTCHR LDA     MSG1,X          LOAD NEXT CHARACTER
8085-C9 00            78 (  2)         CMP     #$00            END OF STRING?
8087-F0 07            79 (2**)         BEQ     DONE
8089-20 65 80         80 (  6)         JSR         LCD_CHR         OUTPUT CHARACTER
808C-E8               81 (  2)         INX
808D-4C 82 80         82 (  3)         JMP     NEXTCHR
8090-EA               83 (  2) DONE    NOP
8091-4C 90 80         84 (  3)         JMP     DONE
8094-                 85
8094-                 86       * ---------------------------------------------------------
8094-                 87       * STORE VECTORS AT END OF EPROM.
FFFA-                 88               .OR     $FFFA
FFFA-                 89               .TA     $7FFA
FFFA-7A 80            90               .DA     START   NMI VECTOR
FFFC-7A 80            91               .DA     START   RESET VECTOR
FFFE-7A 80            92               .DA     START   IRQ VECTOR

0 Errors found during assembly.
0 Warnings found during assembly.

