
SB-Cross Assembler version 3.03.06
Please visit www.sbprojects.net for a complete description.

Assembling....

Pass one
Loaded 65c02 overlay version 3.01.02

Pass two
0000-                  1       * ---------------------------------------------------------
0000-                  2       * INITIALIZE LCD DISPLAY AND OUTPUT SOME DATA TO IT
0000-                  3
0000-                  4
0000-                  5               .CR     65C02
0000-                  6               .TF     hello_lcd.hex,INT
8000-                  7               .OR     $8000
8000-                  8               .TA     $0000
8000-                  9
6000-                 10       ORB     .EQ     $6000           VIA Port B data
6001-                 11       ORA     .EQ     $6001           VIA Port A data
6002-                 12       DDRB    .EQ     $6002           VIA DDRB
6003-                 13       DDRA    .EQ     $6003           VIA DDRA
8000-                 14
8000-20 20 20 42 
     45 36 35 30 
     32 20 53 42 
     43 20 20 20 
     20 20 20 20 
     20 20 20 20 
     20 20 20 20 
     20 20 20 20 
     20 20 20 20 
     20 20 20 20 
     67 69 74 68 
     75 62 2E 63 
     6F 6D 2F 74 
     65 62 6C 00      15       MESSAGE .AS     /   BE6502 SBC                           github.com\/tebl/,#$00
8038-                 16
8038-A9 FF            17 (  2) INITVIA LDA     #%11111111
803A-8D 02 60         18 (  4)         STA     DDRB
803D-A9 E0            19 (  2)         LDA     #%11100000
803F-8D 03 60         20 (  4)         STA     DDRA
8042-60               21 (  6)         RTS
8043-                 22
8043-A9 30            23 (  2) INITLCD LDA     #%00110000      FUNCTION SET (INITIALIZE)
8045-20 79 80         24 (  6)         JSR     LCD_CMD
8048-20 9F 80         25 (  6)         JSR     WAITLCD
804B-                 26
804B-A9 30            27 (  2)         LDA     #%00110000
804D-20 79 80         28 (  6)         JSR     LCD_CMD
8050-20 9F 80         29 (  6)         JSR     WAITLCD
8053-                 30
8053-A9 30            31 (  2)         LDA     #%00110000
8055-20 79 80         32 (  6)         JSR     LCD_CMD
8058-20 9F 80         33 (  6)         JSR     WAITLCD
805B-                 34
805B-A9 38            35 (  2)         LDA     #%00111000      FUNCTION SET (8-BIT TRANSFER)
805D-20 79 80         36 (  6)         JSR     LCD_CMD
8060-20 9F 80         37 (  6)         JSR     WAITLCD
8063-                 38
8063-A9 0D            39 (  2)         LDA     #%00001101      DISPLAY ON, CURSOR EN.
8065-20 79 80         40 (  6)         JSR     LCD_CMD
8068-20 9F 80         41 (  6)         JSR     WAITLCD
806B-                 42
806B-A9 01            43 (  2)         LDA     #%00000001      CLEAR DISPLAY
806D-20 79 80         44 (  6)         JSR     LCD_CMD
8070-20 9F 80         45 (  6)         JSR     WAITLCD
8073-                 46
8073-A9 06            47 (  2)         LDA     #%00000110      SET ENTRY MODE
8075-20 79 80         48 (  6)         JSR     LCD_CMD
8078-60               49 (  6)         RTS
8079-                 50
8079-8D 00 60         51 (  4) LCD_CMD STA     ORB             DATA IS IN ACCUMULATOR
807C-A9 80            52 (  2)         LDA     #%10000000      E=H R/W=L RS=L
807E-8D 01 60         53 (  4)         STA     ORA
8081-A9 00            54 (  2)         LDA     #%00000000      E=L PULSE CLOCK LOW
8083-8D 01 60         55 (  4)         STA     ORA
8086-A9 80            56 (  2)         LDA     #%10000000      E=H
8088-8D 01 60         57 (  4)         STA     ORA
808B-60               58 (  6)         RTS
808C-                 59
808C-8D 00 60         60 (  4) LCD_CHR STA     ORB             DATA IS IN ACCUMULATOR
808F-A9 A0            61 (  2)         LDA     #%10100000      E=H R/W=L RS=H
8091-8D 01 60         62 (  4)         STA     ORA
8094-A9 20            63 (  2)         LDA     #%00100000      E=L PULSE CLOCK LOW
8096-8D 01 60         64 (  4)         STA     ORA
8099-A9 A4            65 (  2)         LDA     #%10100100      E=H
809B-8D 01 60         66 (  4)         STA     ORA
809E-60               67 (  6)         RTS
809F-                 68
809F-EA               69 (  2) WAITLCD NOP                     PLACEHOLDER
80A0-60               70 (  6)         RTS
80A1-                 71
80A1-20 38 80         72 (  6) START   JSR     INITVIA         INITIALIZE VIA
80A4-20 43 80         73 (  6)         JSR     INITLCD         INITIALIZE LCD
80A7-                 74
80A7-A2 00            75 (  2) HELLO   LDX     #$00            CLEAR X
80A9-BD 00 80         76 ( 4*) NEXTCHR LDA     MESSAGE,X       LOAD NEXT CHARACTER
80AC-C9 00            77 (  2)         CMP     #$00            END OF STRING?
80AE-F0 07            78 (2**)         BEQ     DONE
80B0-20 8C 80         79 (  6)         JSR     LCD_CHR         OUTPUT CHARACTER
80B3-E8               80 (  2)         INX
80B4-4C A9 80         81 (  3)         JMP     NEXTCHR
80B7-EA               82 (  2) DONE    NOP
80B8-4C B7 80         83 (  3)         JMP     DONE
80BB-                 84
80BB-                 85       * ---------------------------------------------------------
80BB-                 86       * STORE VECTORS AT END OF EPROM.
FFFA-                 87               .OR     $FFFA
FFFA-                 88               .TA     $7FFA
FFFA-A1 80            89               .DA     START   NMI VECTOR
FFFC-A1 80            90               .DA     START   RESET VECTOR
FFFE-A1 80            91               .DA     START   IRQ VECTOR

0 Errors found during assembly.
0 Warnings found during assembly.

